<?php

/**
 * This file is part of the <name> project.
 *
 * (c) <yourname> <youremail>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Os2Display\MediaBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Os2Display\CoreBundle\Entity\GroupableEntity;
use Os2Display\CoreBundle\Entity\MediaOrder;
use Os2Display\CoreBundle\Entity\Slide;
use Os2Display\CoreBundle\Traits\ApiData;
use Os2Display\CoreBundle\Traits\Groupable;
use Sonata\MediaBundle\Entity\BaseMedia as BaseMedia;

/**
 * This file has been generated by the Sonata EasyExtends bundle ( http://sonata-project.org/bundles/easy-extends )
 *
 * References :
 *   working with object : http://www.doctrine-project.org/projects/orm/2.0/docs/reference/working-with-objects/en
 *
 * Serialization is defined in config/serializer/Entity.Media.xml and inherited properties in SonataMedia/Model.Media.xml.
 *
 * @author <yourname> <youremail>
 */
class Media extends BaseMedia implements GroupableEntity
{
    use ApiData;
    use Groupable;

    /**
     * @var integer $id
     */
    protected $id;

    /**
     * @var \datetime $updated_at
     */
    protected $updatedAt;

    /**
     * @var ArrayCollection $mediaOrders
     */
    protected $mediaOrders;

    /**
     * @var integer $user
     */
    protected $user;

    /**
     * @var string $media_type
     */
    protected $mediaType;

    /**
     * @var ArrayCollection $logoSlides
     *
     * Contains the slides bound to this media as logo.
     */
    protected $logoSlides;

    /**
     * Constructor
     */
    public function __construct()
    {
        $this->mediaOrders = new ArrayCollection();
        $this->logoSlides = new ArrayCollection();
    }

    /**
     * Get id
     *
     * @return integer $id
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Get updated_at
     *
     * @return \datetime $updatedAt
     */
    public function getUpdatedAt()
    {
        return $this->updatedAt;
    }

    /**
     * Add mediaOrder
     *
     * @param MediaOrder $mediaOrder
     * @return Media
     */
    public function addMediaOrder(MediaOrder $mediaOrder)
    {
        $this->mediaOrders[] = $mediaOrder;

        return $this;
    }

    /**
     * Remove mediaOrder
     *
     * @param MediaOrder $mediaOrder
     */
    public function removeMediaOrder(MediaOrder $mediaOrder)
    {
        $this->mediaOrders->removeElement($mediaOrder);
    }

    /**
     * Get mediaOrders
     *
     * @return ArrayCollection
     */
    public function getMediaOrders()
    {
        return $this->mediaOrders;
    }

    /**
     * @param \Doctrine\Common\Collections\ArrayCollection $mediaOrders
     */
    public function setMediaOrders($mediaOrders)
    {
        $this->mediaOrders = $mediaOrders;
    }

    /**
     * Get if media is being used in slide(s)
     *
     * @return boolean
     */
    public function getMediaIsInUse()
    {
        return !$this->mediaOrders->isEmpty();
    }

    /**
     * Get mediaType
     *
     * @return string
     */
    public function getMediaType()
    {
        return $this->mediaType;
    }

    /**
     * Set mediaType
     *
     * @param $mediaType
     */
    public function setMediaType($mediaType)
    {
        $this->mediaType = $mediaType;
    }

    /**
     * Set user
     *
     * @param integer $user
     * @return Media
     */
    public function setUser($user)
    {
        $this->user = $user;

        return $this;
    }

    /**
     * Get user
     *
     * @return integer
     */
    public function getUser()
    {
        return $this->user;
    }

    /**
     * Add a slide to logo slides
     *
     * @param Slide $slide
     * @return $this
     */
    public function addLogoSlide(Slide $slide)
    {
        $this->logoSlides[] = $slide;

        return $this;
    }

    /**
     * Remove a slide from logo slides
     *
     * @param Slide $slide
     */
    public function removeLogoSlide(Slide $slide)
    {
        $this->logoSlides->removeElement($slide);
    }

    /**
     * Get logo slides
     *
     * @return ArrayCollection
     */
    public function getLogoSlides()
    {
        return $this->logoSlides;
    }
}
